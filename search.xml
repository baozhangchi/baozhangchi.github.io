<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker安装MySql</title>
      <link href="/f281c35f.html"/>
      <url>/f281c35f.html</url>
      
        <content type="html"><![CDATA[<ol><li>拉取<code>MySql</code>镜像<pre><code class="highlight C#">docker pull mysql:latest</code></pre></li><li>创建主机目录<pre><code class="highlight bash">sudo <span class="built_in">mkdir</span> /dockersudo <span class="built_in">chown</span> -hR <span class="variable">$USER</span>:docker /docker<span class="built_in">mkdir</span> -p /docker/mysql/conf/conf.d /docker/mysql/data /docker/mysql/logs</code></pre></li><li>创建<code>MySql</code>配置文件<pre><code class="highlight bash">vim /docker/mysql/conf/conf.d/my.cnf</code></pre><pre><code class="highlight bash">[mysqld]<span class="comment">#datadir=/usr/local/mysql/data</span>default_authentication_plugin=mysql_native_password  <span class="comment">#使用mysql8以前的密码插件，以便navicat等工具能够正常连接</span>default-storage-engine=INNODBcharacter_set_server = utf8secure_file_priv=/var/lib/mysql[mysqld_safe]character_set_server = utf8[mysql]default-character-set = utf8[mysql.server]default-character-set = utf8[client]default-character-set = utf8</code></pre></li><li>创建容器脚本<pre><code class="highlight bash">vim /docker/mysql/docker_create.sh</code></pre><pre><code class="highlight bash">docker run -p 3306:3306 --name mysql \-v /docker/mysql/logs:/var/log/mysql \-v /docker/mysql/data:/var/lib/mysql \-v /docker/mysql/conf:/etc/mysql \-e MYSQL_ROOT_PASSWORD=123456 \-d mysql:latest</code></pre></li><li>执行脚本<pre><code class="highlight bash">bash /docker/mysql/docker_create.sh</code></pre></li><li>查看容器<pre><code class="highlight bash">docker ps -a</code></pre><pre><code class="highlight bash">CONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS              PORTS                                                  NAMESf97f3488295f   mysql:latest   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</code></pre></li><li>配置<code>MySql</code>远程权限(可选)<pre><code class="highlight sql">docker <span class="keyword">exec</span> <span class="operator">-</span>it mysql mysql <span class="operator">-</span>u root <span class="operator">-</span>p <span class="number">123456</span>use mysql<span class="keyword">select</span> host,<span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;<span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;flush privileges;<span class="keyword">select</span> host,<span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Docker </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> Docker </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在WPF中计算两条Path的交点坐标</title>
      <link href="/e8335bf4.html"/>
      <url>/e8335bf4.html</url>
      
        <content type="html"><![CDATA[<p>要计算两个WPF路径（Path）的交点坐标，可以使用WPF中的Geometry类和其相应的IntersectsWith方法。以下是一个简单的示例代码：</p><pre><code class="highlight C#"><span class="comment">// 假设您有两个Path对象 path1 和 path2</span><span class="comment">// 获取 path1 和 path2 的Geometry对象</span>Geometry geometry1 = path1.Data.GetFlattenedPathGeometry();Geometry geometry2 = path2.Data.GetFlattenedPathGeometry();<span class="comment">// 计算它们的交点</span>Geometry intersection = Geometry.Combine(geometry1, geometry2, GeometryCombineMode.Intersect, <span class="literal">null</span>);<span class="comment">// 如果存在交点，则获取第一个交点的坐标</span><span class="keyword">if</span> (intersection != <span class="literal">null</span> &amp;&amp; !intersection.IsEmpty)&#123;    PathGeometry pathGeometry = intersection.GetFlattenedPathGeometry();    Point intersectionPoint = pathGeometry.Figures[<span class="number">0</span>].StartPoint;&#125;</code></pre><p>这个示例代码假设你有两个Path对象 path1 和 path2，并且计算它们的交点。首先，通过调用GetFlattenedPathGeometry方法获取它们的几何对象。然后，使用Geometry类的静态方法Combine来计算它们的交点，并指定GeometryCombineMode.Intersect作为操作模式。最后，如果存在交点，则从交点的PathGeometry对象中获取第一个点。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> WPF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> WPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Hyper-V中安装Arch Linux</title>
      <link href="/e8be8a64.html"/>
      <url>/e8be8a64.html</url>
      
        <content type="html"><![CDATA[<p>在<code>Hyper-V</code>中安装<code>Arch Linux</code>虚拟机基本上按照官方安装教程走就可以了，但是在<code>Windows 11</code>中默认创建的虚拟机是没法启动的，连安装环境都进不去，需要用以下命令创建低版本的虚拟机</p><pre><code class="highlight powershell"><span class="built_in">New-VM</span> <span class="literal">-Generation</span> <span class="number">2</span> <span class="literal">-Name</span> Arch <span class="literal">-Path</span> <span class="string">&quot;E:\Hyper-V&quot;</span> <span class="literal">-Version</span> <span class="number">9.2</span></code></pre><p>其中<code>Version</code>的值可以通过以下命令获取到</p><pre><code class="highlight powershell"><span class="built_in">Get-VMHostSupportedVersion</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> Windows </category>
          
          <category> Hyper-V </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
            <tag> 系统 </tag>
            
            <tag> Hyper-V </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于瓦片创建离线导航地图WPF应用（四）</title>
      <link href="/9c3fc5ab.html"/>
      <url>/9c3fc5ab.html</url>
      
        <content type="html"><![CDATA[<p><a href="/2b12dcce.html">上篇</a>我们讲到了如何规划路线，这篇我们来在地图上标记路线并进行轨迹回放</p><ol><li>在地图上标记路线<br>在地图上显示路线，我们需要用到<code>MapPolyline</code>控件<ol><li>给<code>RadMap</code>控件添加一个<code>InformationLayer</code>元素，名称为<code>PolyLayer</code>，用来放置所有的形状<pre><code class="highlight xaml">&lt;telerik:RadMap         x:Name=&quot;Map&quot;         Center=&quot;30.5,114.3&quot;         MouseSelectionMode=&quot;RaiseEvent&quot;         MouseShiftDragMode=&quot;Select&quot;         SelectionRectangleChanged=&quot;RadMap_OnSelectionRectangleChanged&quot;         ZoomLevel=&quot;9&quot;&gt;         &lt;telerik:RadMap.Provider&gt;             &lt;local:OpenStreetMapProvider /&gt;         &lt;/telerik:RadMap.Provider&gt;         &lt;telerik:InformationLayer x:Name=&quot;PolyLayer&quot; /&gt; &lt;/telerik:RadMap&gt;</code></pre></li><li>给<code>PolyLayer</code>添加一个<code>MapPolyline</code>，名称为<code>RoutePolyLine</code>，用来显示路线数据<pre><code class="highlight xaml">&lt;telerik:RadMap         x:Name=&quot;Map&quot;         Center=&quot;30.5,114.3&quot;         MouseSelectionMode=&quot;RaiseEvent&quot;         MouseShiftDragMode=&quot;Select&quot;         SelectionRectangleChanged=&quot;RadMap_OnSelectionRectangleChanged&quot;         ZoomLevel=&quot;9&quot;&gt;         &lt;telerik:RadMap.Provider&gt;             &lt;local:OpenStreetMapProvider /&gt;         &lt;/telerik:RadMap.Provider&gt;         &lt;telerik:InformationLayer x:Name=&quot;PolyLayer&quot;&gt;             &lt;telerik:MapPolyline                 x:Name=&quot;RoutePolyLine&quot;                 Stroke=&quot;Red&quot;                 StrokeThickness=&quot;5&quot; /&gt;         &lt;/telerik:InformationLayer&gt; &lt;/telerik:RadMap&gt;</code></pre></li><li>给<code>RadMap</code>添加一个子元素<code>VisualizationLayer</code>,名称为<code>MarkerLayer</code>，用来显示所有的点标记，给<code>RadMap</code>添加<code>MapMouseClick</code>事件，当鼠标在地图上单击时添加一个标记<pre><code class="highlight xaml">&lt;telerik:RadMap         x:Name=&quot;Map&quot;         Center=&quot;30.5,114.3&quot;         MapMouseClick=&quot;RadMap_OnMapMouseClick&quot;         MouseSelectionMode=&quot;RaiseEvent&quot;         MouseShiftDragMode=&quot;Select&quot;         SelectionRectangleChanged=&quot;RadMap_OnSelectionRectangleChanged&quot;         ZoomLevel=&quot;9&quot;&gt;         &lt;telerik:RadMap.Provider&gt;             &lt;local:OpenStreetMapProvider /&gt;         &lt;/telerik:RadMap.Provider&gt;         &lt;telerik:InformationLayer x:Name=&quot;PolyLayer&quot;&gt;             &lt;telerik:MapPolyline                 x:Name=&quot;RoutePolyLine&quot;                 Stroke=&quot;Red&quot;                 StrokeThickness=&quot;5&quot; /&gt;         &lt;/telerik:InformationLayer&gt;         &lt;telerik:VisualizationLayer x:Name=&quot;MarkerLayer&quot; /&gt; &lt;/telerik:RadMap&gt;</code></pre><pre><code class="highlight C#">   <span class="keyword">private</span> List&lt;Location&gt; _points;<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RadMap_OnMapMouseClick</span>(<span class="params"><span class="built_in">object</span> sender, MapMouseRoutedEventArgs e</span>)</span>&#123;    <span class="keyword">if</span> (_points == <span class="literal">null</span>)    &#123;        _points = <span class="keyword">new</span> List&lt;Location&gt;();    &#125;    _points.Add(e.Location);    MarkerLayer.Items.Add(e.Location);&#125;</code></pre></li><li>给主窗口添加一个按钮，点击后获取所有点标记之间的路线规划，并显示在地图上<pre><code class="highlight xaml">&lt;telerik:RadButton         Margin=&quot;5&quot;         HorizontalAlignment=&quot;Center&quot;         Click=&quot;MarkRoute&quot;         Content=&quot;标记路线&quot; /&gt;</code></pre><pre><code class="highlight C#"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">MarkRoute</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span>&#123;    <span class="keyword">using</span> (<span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient(<span class="keyword">new</span> HttpClientHandler            &#123;                UseProxy = <span class="literal">false</span>            &#125;))    &#123;        <span class="keyword">var</span> result = <span class="keyword">await</span> client.GetStringAsync(<span class="string">$&quot;http://10.0.0.2:8989/route?<span class="subst">&#123;<span class="built_in">string</span>.Join(<span class="string">&quot;&amp;&quot;</span>, _points.Select(p =&gt; <span class="string">$&quot;point=<span class="subst">&#123;p.Latitude&#125;</span>,<span class="subst">&#123;p.Longitude&#125;</span>&quot;</span>))&#125;</span>1&amp;type=json&amp;locale=zh-CN&amp;key=&amp;elevation=false&amp;profile=car&amp;points_encoded=false&quot;</span>);        <span class="keyword">var</span> data = JsonConvert.DeserializeObject&lt;RouteObject&gt;(result);        _routePath = data.RoutePaths[<span class="number">0</span>];        RoutePolyLine.Points = LocationCollection.Parse(<span class="built_in">string</span>.Join(<span class="string">&quot; &quot;</span>, _routePath.RoutePoints.Coordinates.Select(x =&gt; <span class="string">$&quot;<span class="subst">&#123;x[<span class="number">1</span>]&#125;</span>,<span class="subst">&#123;x[<span class="number">0</span>]&#125;</span>&quot;</span>)));    &#125;&#125;</code></pre></li></ol></li><li>进行轨迹回放<ol><li>给<code>PolyLayer</code>添加一个子元素<code>MapPolyline</code>，名称为<code>TrailPolyLine</code>，用来显示轨迹回放路径<pre><code class="highlight xaml">&lt;telerik:InformationLayer x:Name=&quot;PolyLayer&quot;&gt;     &lt;telerik:MapPolyline         x:Name=&quot;RoutePolyLine&quot;         Stroke=&quot;Red&quot;         StrokeThickness=&quot;5&quot; /&gt;     &lt;telerik:MapPolyline         x:Name=&quot;TrailPolyLine&quot;         Stroke=&quot;LawnGreen&quot;         StrokeEndLineCap=&quot;Triangle&quot;         StrokeThickness=&quot;10&quot; /&gt; &lt;/telerik:InformationLayer&gt;</code></pre></li><li>给主窗口添加一个按钮，点击后开始轨迹路径回放<pre><code class="highlight xaml">&lt;telerik:RadButton     Margin=&quot;5&quot;     HorizontalAlignment=&quot;Center&quot;     Click=&quot;TrailPlay&quot;     Content=&quot;轨迹回放&quot; /&gt;</code></pre><pre><code class="highlight C#"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TrailPlay</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span>&#123;    <span class="keyword">if</span> (TrailPolyLine.Points == <span class="literal">null</span>)    &#123;        TrailPolyLine.Points = <span class="keyword">new</span> LocationCollection();    &#125;    <span class="keyword">else</span>    &#123;        TrailPolyLine.Points.Clear();    &#125;    Task.Run(() =&gt;    &#123;        <span class="keyword">var</span> instructionEnumerator = _routePath.Instructions.GetEnumerator();        <span class="keyword">while</span> (instructionEnumerator.MoveNext())        &#123;            <span class="keyword">var</span> instruction = instructionEnumerator.Current;            <span class="keyword">if</span> (instruction.Distance == <span class="number">0</span>)  <span class="comment">//接口返回的最后一段的Interval两个点都是终点，需要进行判断</span>            &#123;                <span class="keyword">break</span>;            &#125;            <span class="keyword">var</span> totalTime = instruction.Time * <span class="number">1000</span> / <span class="number">1000</span>; <span class="comment">//获取到的轨迹时间单位为秒，这里先*1000转成毫秒，然后根据自己需要进行加速，我这里加快了1000倍</span>            <span class="keyword">var</span> speed = instruction.Distance / totalTime;   <span class="comment">//在这一段路上的平均速度</span>            <span class="keyword">var</span> startIndex = instruction.Interval[<span class="number">0</span>];            <span class="keyword">var</span> endIndex = instruction.Interval[<span class="number">1</span>];            <span class="keyword">var</span> startPoint = _routePath.RoutePoints.Coordinates[startIndex];            <span class="keyword">var</span> endPoint = _routePath.RoutePoints.Coordinates[endIndex];            <span class="keyword">try</span>            &#123;                <span class="keyword">var</span> animation = <span class="keyword">new</span> DoubleAnimationUsingPath();                animation.Duration = <span class="keyword">new</span> Duration(TimeSpan.FromSeconds(totalTime));                animation.PathGeometry = PathGeometry.CreateFromGeometry(Geometry.Parse(<span class="string">$&quot;M <span class="subst">&#123;<span class="built_in">string</span>.Join(<span class="string">&quot; &quot;</span>, _routePath.RoutePoints.Coordinates.Skip(startIndex).Take(endIndex - startIndex + <span class="number">1</span>).Select(x =&gt; <span class="string">$&quot;<span class="subst">&#123;x[<span class="number">1</span>]&#125;</span>,<span class="subst">&#123;x[<span class="number">0</span>]&#125;</span>&quot;</span>))&#125;</span>&quot;</span>));                <span class="keyword">var</span> path = animation.PathGeometry;                <span class="keyword">var</span> time = <span class="number">0</span>d;                <span class="keyword">do</span>                &#123;                    path.GetPointAtFractionLength(time / totalTime, <span class="keyword">out</span> <span class="keyword">var</span> point, <span class="keyword">out</span> <span class="keyword">var</span> tangent);                    Dispatcher.Invoke(() =&gt; &#123; TrailPolyLine.Points.Add(<span class="keyword">new</span> Location(point.X, point.Y)); &#125;);                    <span class="keyword">if</span> (time + <span class="number">200</span>d &lt; totalTime)                    &#123;                        Thread.Sleep(<span class="number">200</span>);                        time += <span class="number">200</span>d;                    &#125;                    <span class="keyword">else</span>                    &#123;                        Thread.Sleep(totalTime - (<span class="built_in">int</span>)time);                        Dispatcher.Invoke(() =&gt; &#123; TrailPolyLine.Points.Add(<span class="keyword">new</span> Location(endPoint[<span class="number">1</span>], endPoint[<span class="number">0</span>])); &#125;);                        <span class="keyword">break</span>;                    &#125;                &#125; <span class="keyword">while</span> (totalTime &gt; time);            &#125;            <span class="keyword">catch</span> (Exception exception)            &#123;                instructionEnumerator.Dispose();                Console.WriteLine(exception);                <span class="keyword">throw</span>;            &#125;        &#125;        instructionEnumerator.Dispose();    &#125;);&#125;</code></pre>轨迹回放最复杂的就是获取到每一时刻的位置，在<code>WPF</code>中通过定义一个<code>DoubleAnimationUsingPath</code>后通过<code>GetPointAtFractionLength</code>方法可以很方便的获取到</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> WPF </category>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> GIS </tag>
            
            <tag> WPF </tag>
            
            <tag> GraphHopper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据经纬度计算两点距离</title>
      <link href="/ea5b9e52.html"/>
      <url>/ea5b9e52.html</url>
      
        <content type="html"><![CDATA[<p>可以根据以下代码计算两个经纬度坐标之间的距离，单位为米：</p><pre><code class="highlight C#"><span class="keyword">using</span> System;<span class="keyword">namespace</span> <span class="title">DistanceCalculator</span>&#123;    <span class="keyword">class</span> <span class="title">Program</span>    &#123;        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>        &#123;            <span class="built_in">double</span> lat1 = <span class="number">40.7128</span>; <span class="comment">// 第一个点的纬度</span>            <span class="built_in">double</span> lon1 = <span class="number">-74.0060</span>; <span class="comment">// 第一个点的经度</span>            <span class="built_in">double</span> lat2 = <span class="number">51.5074</span>; <span class="comment">// 第二个点的纬度</span>            <span class="built_in">double</span> lon2 = <span class="number">-0.1278</span>; <span class="comment">// 第二个点的经度</span>            <span class="built_in">double</span> distance = GetDistance(lat1, lon1, lat2, lon2);            Console.WriteLine(<span class="string">$&quot;两个点之间的距离是 <span class="subst">&#123;distance&#125;</span> 米&quot;</span>);            <span class="comment">// 输出：两个点之间的距离是 5563758.089416144 米</span>        &#125;        <span class="function"><span class="keyword">static</span> <span class="built_in">double</span> <span class="title">GetDistance</span>(<span class="params"><span class="built_in">double</span> lat1, <span class="built_in">double</span> lon1, <span class="built_in">double</span> lat2, <span class="built_in">double</span> lon2</span>)</span>        &#123;            <span class="built_in">int</span> R = <span class="number">6371</span>; <span class="comment">// 地球的半径，单位千米</span>            <span class="built_in">double</span> dLat = (lat2 - lat1) * Math.PI / <span class="number">180.0</span>;            <span class="built_in">double</span> dLon = (lon2 - lon1) * Math.PI / <span class="number">180.0</span>;            <span class="built_in">double</span> lat1Rad = lat1 * Math.PI / <span class="number">180.0</span>;            <span class="built_in">double</span> lat2Rad = lat2 * Math.PI / <span class="number">180.0</span>;            <span class="built_in">double</span> a = Math.Sin(dLat / <span class="number">2</span>) * Math.Sin(dLat / <span class="number">2</span>) +                       Math.Sin(dLon / <span class="number">2</span>) * Math.Sin(dLon / <span class="number">2</span>) * Math.Cos(lat1Rad) * Math.Cos(lat2Rad);            <span class="built_in">double</span> c = <span class="number">2</span> * Math.Atan2(Math.Sqrt(a), Math.Sqrt(<span class="number">1</span> - a));            <span class="built_in">double</span> distance = R * c * <span class="number">1000</span>;            <span class="keyword">return</span> distance;        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> WPF </category>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> GIS </tag>
            
            <tag> WPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于瓦片创建离线导航地图WPF应用（三）</title>
      <link href="/2b12dcce.html"/>
      <url>/2b12dcce.html</url>
      
        <content type="html"><![CDATA[<p>要实现导航，就得先获取到导航的路径，而各个公司的路径计算接口都是在线接口，不提供离线支持，幸好还有个开源的<a href="https://github.com/graphhopper/graphhopper">Graphhopper</a>支持离线计算路径</p><ol><li>安装Java环境<br>按文档，我们需要安装jdk8以上的版本<a href="https://www.java.com/download/ie_manual.jsp"></a></li><li>下载<code>Graphhopper</code>的<a href="https://repo1.maven.org/maven2/com/graphhopper/graphhopper-web/7.0/graphhopper-web-7.0.jar">graphhopper-web-7.0.jar</a>包和示例配置文件<a href="https://raw.githubusercontent.com/graphhopper/graphhopper/7.x/config-example.yml">config-example.yml</a></li><li>下载<code>osm.pbf</code>文件，我们可以在<a href="https://download.openstreetmap.fr/extracts/">openstreetmap</a>下载，这里可以按区域进行下载，最小到省级，以下我们以湖北省的数据为例，下载链接为<a href="https://download.openstreetmap.fr/extracts/asia/china/hubei.osm.pbf">hubei.osm.pbf</a></li><li>修改配置文件<code>config-example.yml</code><ol><li>打开配置文件，搜索<code>8989</code>，这是默认端口，修改绑定的<code>IP</code>为：<code>0.0.0.0</code><pre><code class="highlight bash">server: application_connectors:     - <span class="built_in">type</span>: http     port: 8989     <span class="comment"># for security reasons bind to localhost</span>     bind_host: 0.0.0.0</code></pre></li></ol></li><li>所有文件都下载完成后我们在终端执行一下命令<pre><code class="highlight bash">java -D <span class="string">&quot;dw.graphhopper.datareader.file=hubei.osm.pbf&quot;</span> -jar graphhopper-web-6.2.jar server config-example.yml</code></pre>当显示<code>Started application...</code>后打开浏览器访问<code>http:localhost:8989</code><br><img src="https://raw.githubusercontent.com/baozhangchi/blog_image/master/images/202303201045378.png"></li><li>测试导航链接<br><code>Graphhopper</code>的路径获取接口为<a href="http://localhost:8989/route"></a>，接口参数可以参考接口文档：<a href="https://docs.graphhopper.com/#operation/getRoute">Graphhopper路径计算接口说明</a>，我们随便给两个点来测试<br>请求链接：<pre><code class="highlight bash">http://localhost:8989/route?point=30.359841397025534,114.73159790039062&amp;point=30.39716079871885,114.62104797363281&amp;<span class="built_in">type</span>=json&amp;locale=zh-CN&amp;key=&amp;elevation=<span class="literal">false</span>&amp;profile=car&amp;points_encoded=<span class="literal">false</span></code></pre>接口响应：<pre><code class="highlight json"><span class="punctuation">&#123;</span> <span class="attr">&quot;hints&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>     <span class="attr">&quot;visited_nodes.sum&quot;</span><span class="punctuation">:</span> <span class="number">66</span><span class="punctuation">,</span>     <span class="attr">&quot;visited_nodes.average&quot;</span><span class="punctuation">:</span> <span class="number">66</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>     <span class="attr">&quot;copyrights&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>         <span class="string">&quot;GraphHopper&quot;</span><span class="punctuation">,</span>         <span class="string">&quot;OpenStreetMap contributors&quot;</span>     <span class="punctuation">]</span><span class="punctuation">,</span>     <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">31</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>     <span class="punctuation">&#123;</span>         <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="number">19514.51</span><span class="punctuation">,</span>         <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">1114.654941</span><span class="punctuation">,</span>         <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">1114654</span><span class="punctuation">,</span>         <span class="attr">&quot;transfers&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>         <span class="attr">&quot;points_encoded&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>         <span class="attr">&quot;bbox&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>             <span class="number">114.613946</span><span class="punctuation">,</span>             <span class="number">30.326794</span><span class="punctuation">,</span>             <span class="number">114.730031</span><span class="punctuation">,</span>             <span class="number">30.399498</span>         <span class="punctuation">]</span><span class="punctuation">,</span>         <span class="attr">&quot;points&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>             <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LineString&quot;</span><span class="punctuation">,</span>             <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                 <span class="punctuation">[</span>                     <span class="number">114.730031</span><span class="punctuation">,</span>                     <span class="number">30.360242</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.727793</span><span class="punctuation">,</span>                     <span class="number">30.353731</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.727611</span><span class="punctuation">,</span>                     <span class="number">30.353287</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.727319</span><span class="punctuation">,</span>                     <span class="number">30.352756</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.726996</span><span class="punctuation">,</span>                     <span class="number">30.352296</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.726575</span><span class="punctuation">,</span>                     <span class="number">30.351811</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.726024</span><span class="punctuation">,</span>                     <span class="number">30.35133</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.725397</span><span class="punctuation">,</span>                     <span class="number">30.350891</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.724648</span><span class="punctuation">,</span>                     <span class="number">30.350502</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.720162</span><span class="punctuation">,</span>                     <span class="number">30.348533</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.71491</span><span class="punctuation">,</span>                     <span class="number">30.346098</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.71261</span><span class="punctuation">,</span>                     <span class="number">30.344972</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.708633</span><span class="punctuation">,</span>                     <span class="number">30.343195</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.700727</span><span class="punctuation">,</span>                     <span class="number">30.339601</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.698002</span><span class="punctuation">,</span>                     <span class="number">30.338345</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.694452</span><span class="punctuation">,</span>                     <span class="number">30.336746</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.693914</span><span class="punctuation">,</span>                     <span class="number">30.336641</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.692906</span><span class="punctuation">,</span>                     <span class="number">30.336517</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.688923</span><span class="punctuation">,</span>                     <span class="number">30.335902</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.688261</span><span class="punctuation">,</span>                     <span class="number">30.335872</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.685568</span><span class="punctuation">,</span>                     <span class="number">30.336168</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.683604</span><span class="punctuation">,</span>                     <span class="number">30.336413</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.680676</span><span class="punctuation">,</span>                     <span class="number">30.336812</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.675867</span><span class="punctuation">,</span>                     <span class="number">30.337182</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.674045</span><span class="punctuation">,</span>                     <span class="number">30.337262</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.673688</span><span class="punctuation">,</span>                     <span class="number">30.337207</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.673207</span><span class="punctuation">,</span>                     <span class="number">30.336944</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.672756</span><span class="punctuation">,</span>                     <span class="number">30.336656</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.672311</span><span class="punctuation">,</span>                     <span class="number">30.336261</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.666887</span><span class="punctuation">,</span>                     <span class="number">30.33023</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.664749</span><span class="punctuation">,</span>                     <span class="number">30.327824</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.663955</span><span class="punctuation">,</span>                     <span class="number">30.326794</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.654808</span><span class="punctuation">,</span>                     <span class="number">30.329432</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.653512</span><span class="punctuation">,</span>                     <span class="number">30.329562</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.652162</span><span class="punctuation">,</span>                     <span class="number">30.329657</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.64237</span><span class="punctuation">,</span>                     <span class="number">30.329995</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.642076</span><span class="punctuation">,</span>                     <span class="number">30.331308</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.641637</span><span class="punctuation">,</span>                     <span class="number">30.332639</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.639401</span><span class="punctuation">,</span>                     <span class="number">30.337876</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.638919</span><span class="punctuation">,</span>                     <span class="number">30.338739</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.638266</span><span class="punctuation">,</span>                     <span class="number">30.339726</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.637646</span><span class="punctuation">,</span>                     <span class="number">30.340538</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.636195</span><span class="punctuation">,</span>                     <span class="number">30.342107</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.630376</span><span class="punctuation">,</span>                     <span class="number">30.347983</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.62918</span><span class="punctuation">,</span>                     <span class="number">30.349509</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.628369</span><span class="punctuation">,</span>                     <span class="number">30.350667</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.626333</span><span class="punctuation">,</span>                     <span class="number">30.354281</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.626057</span><span class="punctuation">,</span>                     <span class="number">30.354836</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.624789</span><span class="punctuation">,</span>                     <span class="number">30.356966</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.623004</span><span class="punctuation">,</span>                     <span class="number">30.360047</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.62213</span><span class="punctuation">,</span>                     <span class="number">30.36131</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.621285</span><span class="punctuation">,</span>                     <span class="number">30.362393</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.620281</span><span class="punctuation">,</span>                     <span class="number">30.363538</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616983</span><span class="punctuation">,</span>                     <span class="number">30.367069</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616302</span><span class="punctuation">,</span>                     <span class="number">30.367919</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.61571</span><span class="punctuation">,</span>                     <span class="number">30.368881</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.6152</span><span class="punctuation">,</span>                     <span class="number">30.369942</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.614947</span><span class="punctuation">,</span>                     <span class="number">30.370684</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.614787</span><span class="punctuation">,</span>                     <span class="number">30.371286</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.614624</span><span class="punctuation">,</span>                     <span class="number">30.372265</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.614579</span><span class="punctuation">,</span>                     <span class="number">30.373304</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.614654</span><span class="punctuation">,</span>                     <span class="number">30.374339</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.614864</span><span class="punctuation">,</span>                     <span class="number">30.37543</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.615408</span><span class="punctuation">,</span>                     <span class="number">30.376924</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616237</span><span class="punctuation">,</span>                     <span class="number">30.378422</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.618232</span><span class="punctuation">,</span>                     <span class="number">30.38177</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.618551</span><span class="punctuation">,</span>                     <span class="number">30.382374</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.618723</span><span class="punctuation">,</span>                     <span class="number">30.382789</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.618792</span><span class="punctuation">,</span>                     <span class="number">30.383005</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.618855</span><span class="punctuation">,</span>                     <span class="number">30.383341</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.61884</span><span class="punctuation">,</span>                     <span class="number">30.383617</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616953</span><span class="punctuation">,</span>                     <span class="number">30.389101</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.61677</span><span class="punctuation">,</span>                     <span class="number">30.389783</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616995</span><span class="punctuation">,</span>                     <span class="number">30.390167</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.617038</span><span class="punctuation">,</span>                     <span class="number">30.390424</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.617025</span><span class="punctuation">,</span>                     <span class="number">30.390616</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616936</span><span class="punctuation">,</span>                     <span class="number">30.391051</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616837</span><span class="punctuation">,</span>                     <span class="number">30.391229</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616523</span><span class="punctuation">,</span>                     <span class="number">30.391398</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616201</span><span class="punctuation">,</span>                     <span class="number">30.3915</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616094</span><span class="punctuation">,</span>                     <span class="number">30.391629</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.616024</span><span class="punctuation">,</span>                     <span class="number">30.391782</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.615262</span><span class="punctuation">,</span>                     <span class="number">30.393903</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.614407</span><span class="punctuation">,</span>                     <span class="number">30.396633</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.613946</span><span class="punctuation">,</span>                     <span class="number">30.398521</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.61431</span><span class="punctuation">,</span>                     <span class="number">30.398618</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.617237</span><span class="punctuation">,</span>                     <span class="number">30.398616</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.618621</span><span class="punctuation">,</span>                     <span class="number">30.398995</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.619573</span><span class="punctuation">,</span>                     <span class="number">30.399498</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.619725</span><span class="punctuation">,</span>                     <span class="number">30.399336</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.62024</span><span class="punctuation">,</span>                     <span class="number">30.398961</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.620511</span><span class="punctuation">,</span>                     <span class="number">30.398735</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.620348</span><span class="punctuation">,</span>                     <span class="number">30.39857</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.620282</span><span class="punctuation">,</span>                     <span class="number">30.398442</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.620602</span><span class="punctuation">,</span>                     <span class="number">30.39836</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.621001</span><span class="punctuation">,</span>                     <span class="number">30.398371</span>                 <span class="punctuation">]</span>             <span class="punctuation">]</span>         <span class="punctuation">&#125;</span><span class="punctuation">,</span>         <span class="attr">&quot;instructions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>             <span class="punctuation">&#123;</span>                 <span class="attr">&quot;ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;G316&quot;</span><span class="punctuation">,</span>                 <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="number">8018.259</span><span class="punctuation">,</span>                 <span class="attr">&quot;heading&quot;</span><span class="punctuation">:</span> <span class="number">196.52</span><span class="punctuation">,</span>                 <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>                 <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                     <span class="number">0</span><span class="punctuation">,</span>                     <span class="number">31</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;继续行驶到 汽李线&quot;</span><span class="punctuation">,</span>                 <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">412368</span><span class="punctuation">,</span>                 <span class="attr">&quot;street_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;汽李线&quot;</span>             <span class="punctuation">&#125;</span><span class="punctuation">,</span>             <span class="punctuation">&#123;</span>                 <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="number">2121.311</span><span class="punctuation">,</span>                 <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>                 <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                     <span class="number">31</span><span class="punctuation">,</span>                     <span class="number">35</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;右转 到  凤莲大道&quot;</span><span class="punctuation">,</span>                 <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">117488</span><span class="punctuation">,</span>                 <span class="attr">&quot;street_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;凤莲大道&quot;</span>             <span class="punctuation">&#125;</span><span class="punctuation">,</span>             <span class="punctuation">&#123;</span>                 <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="number">8577.373</span><span class="punctuation">,</span>                 <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>                 <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                     <span class="number">35</span><span class="punctuation">,</span>                     <span class="number">84</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;右转&quot;</span><span class="punctuation">,</span>                 <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">475054</span><span class="punctuation">,</span>                 <span class="attr">&quot;street_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span>             <span class="punctuation">&#125;</span><span class="punctuation">,</span>             <span class="punctuation">&#123;</span>                 <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="number">563.627</span><span class="punctuation">,</span>                 <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>                 <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                     <span class="number">84</span><span class="punctuation">,</span>                     <span class="number">88</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;右转&quot;</span><span class="punctuation">,</span>                 <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">67635</span><span class="punctuation">,</span>                 <span class="attr">&quot;street_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span>             <span class="punctuation">&#125;</span><span class="punctuation">,</span>             <span class="punctuation">&#123;</span>                 <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="number">123.95</span><span class="punctuation">,</span>                 <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>                 <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                     <span class="number">88</span><span class="punctuation">,</span>                     <span class="number">91</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;右转&quot;</span><span class="punctuation">,</span>                 <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">22311</span><span class="punctuation">,</span>                 <span class="attr">&quot;street_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span>             <span class="punctuation">&#125;</span><span class="punctuation">,</span>             <span class="punctuation">&#123;</span>                 <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="number">39.705</span><span class="punctuation">,</span>                 <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>                 <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                     <span class="number">91</span><span class="punctuation">,</span>                     <span class="number">93</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;右转&quot;</span><span class="punctuation">,</span>                 <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">7147</span><span class="punctuation">,</span>                 <span class="attr">&quot;street_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span>             <span class="punctuation">&#125;</span><span class="punctuation">,</span>             <span class="punctuation">&#123;</span>                 <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="number">70.285</span><span class="punctuation">,</span>                 <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="number">-2</span><span class="punctuation">,</span>                 <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                     <span class="number">93</span><span class="punctuation">,</span>                     <span class="number">95</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;左转&quot;</span><span class="punctuation">,</span>                 <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">12651</span><span class="punctuation">,</span>                 <span class="attr">&quot;street_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span>             <span class="punctuation">&#125;</span><span class="punctuation">,</span>             <span class="punctuation">&#123;</span>                 <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>                 <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span>                 <span class="attr">&quot;last_heading&quot;</span><span class="punctuation">:</span> <span class="number">88.07507226751014</span><span class="punctuation">,</span>                 <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                     <span class="number">95</span><span class="punctuation">,</span>                     <span class="number">95</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;终点到达&quot;</span><span class="punctuation">,</span>                 <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>                 <span class="attr">&quot;street_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span>             <span class="punctuation">&#125;</span>         <span class="punctuation">]</span><span class="punctuation">,</span>         <span class="attr">&quot;legs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>         <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>         <span class="attr">&quot;ascend&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>         <span class="attr">&quot;descend&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>         <span class="attr">&quot;snapped_waypoints&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>             <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LineString&quot;</span><span class="punctuation">,</span>             <span class="attr">&quot;coordinates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>                 <span class="punctuation">[</span>                     <span class="number">114.730031</span><span class="punctuation">,</span>                     <span class="number">30.360242</span>                 <span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="punctuation">[</span>                     <span class="number">114.621001</span><span class="punctuation">,</span>                     <span class="number">30.398371</span>                 <span class="punctuation">]</span>             <span class="punctuation">]</span>         <span class="punctuation">&#125;</span>     <span class="punctuation">&#125;</span> <span class="punctuation">]</span><span class="punctuation">&#125;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> WPF </category>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> GIS </tag>
            
            <tag> WPF </tag>
            
            <tag> GraphHopper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于瓦片创建离线导航地图WPF应用（二）</title>
      <link href="/660c7f9c.html"/>
      <url>/660c7f9c.html</url>
      
        <content type="html"><![CDATA[<p>上一篇我们创建了一个基本的支持本地瓦片的离线地图，这次我们开始写瓦片的下载功能，需要的功能是选定一个区域，按设置的缩放级别下载离线瓦片供后续使用</p><ol><li>添加框选功能支持<ol><li>我们先设置<code>MouseShiftDragMode（按住Shift拖动左键）</code>为<code>Select</code>，然后设置<code>MouseSelectionMode</code>为<code>RaiseEvent</code>，此时我们可以按住<code>Shift</code>键，然后按下鼠标左键后拖动来选择一个区域，松开鼠标后会触发<code>SelectionRectangleChanged</code>事件<pre><code class="highlight xaml">&lt;telerik:RadMapCenter=&quot;30.5,114.3&quot;MouseSelectionMode=&quot;RaiseEvent&quot;MouseShiftDragMode=&quot;Select&quot;SelectionRectangleChanged=&quot;RadMap_OnSelectionRectangleChanged&quot;ZoomLevel=&quot;9&quot;&gt;    &lt;telerik:RadMap.Provider&gt;        &lt;local:OpenStreetMapProvider /&gt;    &lt;/telerik:RadMap.Provider&gt;&lt;/telerik:RadMap&gt;</code></pre>后台代码：<pre><code class="highlight C#"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RadMap_OnSelectionRectangleChanged</span>(<span class="params"><span class="built_in">object</span> sender, SelectionRectangleChangedEventArgs e</span>)</span>&#123;    _selectedRect = e.Rect;&#125;</code></pre></li><li>添加一个按钮开始下载<pre><code class="highlight xaml">&lt;Grid&gt;    &lt;Grid.RowDefinitions&gt;        &lt;RowDefinition /&gt;        &lt;RowDefinition Height=&quot;Auto&quot; /&gt;    &lt;/Grid.RowDefinitions&gt;    &lt;telerik:RadMap        Center=&quot;30.5,114.3&quot;        MouseSelectionMode=&quot;RaiseEvent&quot;        MouseShiftDragMode=&quot;Select&quot;        SelectionRectangleChanged=&quot;RadMap_OnSelectionRectangleChanged&quot;        ZoomLevel=&quot;9&quot;&gt;        &lt;telerik:RadMap.Provider&gt;            &lt;local:OpenStreetMapProvider /&gt;        &lt;/telerik:RadMap.Provider&gt;    &lt;/telerik:RadMap&gt;    &lt;telerik:RadButton        Grid.Row=&quot;1&quot;        Margin=&quot;5&quot; Click=&quot;ButtonBase_OnClick&quot;        HorizontalAlignment=&quot;Center&quot;        Content=&quot;下载&quot; /&gt;&lt;/Grid&gt;</code></pre>后台代码：<pre><code class="highlight C#"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ButtonBase_OnClick</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span>&#123;    <span class="keyword">for</span> (<span class="keyword">var</span> level = <span class="number">0</span>; level &lt; <span class="number">19</span>; level++)    &#123;        <span class="keyword">var</span> (startX, startY) = GetTileXY(_selectedRect.Northwest.Latitude, _selectedRect.Northwest.Longitude, level);        <span class="keyword">var</span> (endX, endY) = GetTileXY(_selectedRect.Southeast.Latitude, _selectedRect.Southeast.Longitude, level);        <span class="keyword">for</span> (<span class="keyword">var</span> x = startX; x &lt;= endX; x++)        &#123;            <span class="keyword">var</span> folder = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, <span class="string">&quot;Tiles&quot;</span>, level.ToString(), x.ToString());            <span class="keyword">if</span> (!Directory.Exists(folder))            &#123;                Directory.CreateDirectory(folder);            &#125;               <span class="keyword">for</span> (<span class="keyword">var</span> y = startY; y &lt;= endY; y++)            &#123;                <span class="keyword">var</span> fullPath = Path.Combine(folder, <span class="string">$&quot;<span class="subst">&#123;y&#125;</span>.png&quot;</span>);                <span class="keyword">if</span> (!File.Exists(fullPath))                &#123;                    <span class="keyword">var</span> url = <span class="string">$&quot;https://tile.openstreetmap.org/<span class="subst">&#123;level&#125;</span>/<span class="subst">&#123;x&#125;</span>/<span class="subst">&#123;y&#125;</span>.png&quot;</span>;                    <span class="keyword">var</span> client = <span class="keyword">new</span> WebClient();                    client.Headers.Clear();                    client.Headers.Add(<span class="string">&quot;referer&quot;</span>, <span class="string">&quot;https://www.openstreetmap.org/&quot;</span>);                    client.Headers.Add(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8&quot;</span>);                    client.Headers.Add(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.69&quot;</span>);                    client.DownloadFile(url, fullPath);                &#125;            &#125;        &#125;    &#125;&#125;</code></pre></li></ol></li><li>按获取到的框选区域获取瓦片地址<br><code>GetTileXY</code>方法的实现参考之前的<a href="/57318bee.html">C#根据经纬度和缩放级别计算瓦片</a>坐标来实现，缩放级别默认给0-19，基本上已经够用了，下载的方法可以根据自己需要改成异步多线程下载<br>现在让我们愉快的下载吧</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> WPF </category>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> GIS </tag>
            
            <tag> WPF </tag>
            
            <tag> GraphHopper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于瓦片创建离线导航地图WPF应用（一）</title>
      <link href="/2913726a.html"/>
      <url>/2913726a.html</url>
      
        <content type="html"><![CDATA[<p>目前纯WPF的地图控件，免费开源的有<code>GMap.Net</code>，不过我使用的是<code>Telerik</code>的收费控件，它里面有个<code>RadMap</code>控件，以下内容就全部基于<code>RadMap</code>来写，所有的内容从0开始</p><ol><li><p>创建<code>WPF</code>应用，并添加<code>RadMap</code>的支持</p> <img src="https://raw.githubusercontent.com/baozhangchi/blog_image/master/images/202303200949012.png" /> <img src="https://raw.githubusercontent.com/baozhangchi/blog_image/master/images/202303200950681.png" alt="image-20230320092730944" /></li><li><p>在界面中添加<code>RadMap</code>控件，并设置<code>Center([30.5,114.3]武汉市)</code>、<code>ZoomLevel(9)</code>以及<code>Provider</code></p><pre><code class="highlight xaml">&lt;Window x:Class=&quot;OfflineTilesMap.MainWindow&quot;        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;        xmlns:local=&quot;clr-namespace:OfflineTilesMap&quot;        xmlns:telerik=&quot;http://schemas.telerik.com/2008/xaml/presentation&quot;        mc:Ignorable=&quot;d&quot;        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;    &lt;Grid&gt;        &lt;telerik:RadMap Center=&quot;30.5,114.3&quot; ZoomLevel=&quot;9&quot;&gt;            &lt;telerik:RadMap.Provider&gt;                &lt;local:OpenStreetMapProvider/&gt;            &lt;/telerik:RadMap.Provider&gt;        &lt;/telerik:RadMap&gt;    &lt;/Grid&gt;&lt;/Window&gt;</code></pre><p>其中<code>Telerik</code>控件库本身提供了<code>OSM</code>的<code>Provider</code>：<code>OpenStreetMapProvider</code>，不过是个在线版本，还需要提供<code>OSM</code>的<code>Key</code>，这里我们需要新建一个使用本地瓦片的<code>Provider</code></p><pre><code class="highlight C#"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">OpenStreetMapProvider</span> : <span class="title">TiledProvider</span>&#123;    <span class="meta">#<span class="keyword">region</span> Constructors</span>    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;inheritdoc /&gt;</span></span>    <span class="function"><span class="keyword">public</span> <span class="title">OpenStreetMapProvider</span>()</span>    &#123;        <span class="keyword">var</span> source = <span class="keyword">new</span> OpenStreetMapTilesMapSource(<span class="number">1</span>, <span class="number">19</span>, <span class="number">256</span>, <span class="number">256</span>);        MapSources.Add(source.UniqueId, source);    &#125;    <span class="meta">#<span class="keyword">endregion</span></span>    <span class="meta">#<span class="keyword">region</span> Properties</span>    <span class="keyword">public</span> <span class="keyword">override</span> ISpatialReference SpatialReference &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> MercatorProjection();    <span class="meta">#<span class="keyword">endregion</span></span>&#125;<span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">OpenStreetMapTilesMapSource</span> : <span class="title">TiledMapSource</span>&#123;    <span class="meta">#<span class="keyword">region</span> Constructors</span>    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;inheritdoc /&gt;</span></span>    <span class="function"><span class="keyword">public</span> <span class="title">OpenStreetMapTilesMapSource</span>(<span class="params"><span class="built_in">int</span> minZoomLevel, <span class="built_in">int</span> maxZoomLevel, <span class="built_in">int</span> tileWidth, <span class="built_in">int</span> tileHeight</span>) : <span class="title">base</span>(<span class="params">minZoomLevel, maxZoomLevel, tileWidth, tileHeight</span>)</span>    &#123;    &#125;    <span class="meta">#<span class="keyword">endregion</span></span>    <span class="meta">#<span class="keyword">region</span> Methods</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Initialize</span>()</span>    &#123;        RaiseInitializeCompleted();    &#125;    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;inheritdoc /&gt;</span></span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Uri <span class="title">GetTile</span>(<span class="params"><span class="built_in">int</span> tileLevel, <span class="built_in">int</span> tilePositionX, <span class="built_in">int</span> tilePositionY</span>)</span>    &#123;        <span class="keyword">var</span> zoomLevel = ConvertTileToZoomLevel(tileLevel);        <span class="keyword">var</span> filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, <span class="string">$@&quot;Tiles\<span class="subst">&#123;zoomLevel&#125;</span>\<span class="subst">&#123;tilePositionX&#125;</span>\<span class="subst">&#123;tilePositionY&#125;</span>.png&quot;</span>);        <span class="keyword">if</span> (!File.Exists(filePath))        &#123;            <span class="keyword">if</span> (!Directory.Exists(Path.GetDirectoryName(filePath)))            &#123;                Directory.CreateDirectory(Path.GetDirectoryName(filePath));            &#125;            <span class="keyword">var</span> url = <span class="string">$&quot;https://tile.openstreetmap.org/<span class="subst">&#123;zoomLevel&#125;</span>/<span class="subst">&#123;tilePositionX&#125;</span>/<span class="subst">&#123;tilePositionY&#125;</span>.png&quot;</span>;            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;            <span class="keyword">var</span> client = <span class="keyword">new</span> WebClient();            client.Headers.Clear();            client.Headers.Add(<span class="string">&quot;referer&quot;</span>, <span class="string">&quot;https://www.openstreetmap.org/&quot;</span>);            client.Headers.Add(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8&quot;</span>);            client.Headers.Add(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.69&quot;</span>);            client.DownloadFile(url, filePath);        &#125;        <span class="keyword">return</span> <span class="keyword">new</span> Uri(filePath, UriKind.Absolute);    &#125;    <span class="meta">#<span class="keyword">endregion</span></span>&#125;</code></pre></li><li><p>运行程序，我们就可以看到武汉市的地图了</p> <img src="https://raw.githubusercontent.com/baozhangchi/blog_image/master/images/202303200952833.png" style="zoom:50%;" /><p> 显示范围内用到的瓦片优先会使用本地的瓦片，没有找到瓦片文件的时候会去网上下载</p><p> 瓦片保存地址为运行目录下<code>Tiles</code>文件夹中</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> WPF </category>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> GIS </tag>
            
            <tag> WPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Linux系统获取CPU、内存、硬盘IO和硬盘使用空间情况信息</title>
      <link href="/7ace05a1.html"/>
      <url>/7ace05a1.html</url>
      
        <content type="html"><![CDATA[<p>要在C#中获取Linux系统的CPU、内存、硬盘IO和硬盘使用空间情况信息，可以使用Linux系统上的一些命令行工具，通过C#代码执行这些命令并解析输出结果。</p><p>以下是一些可以使用的命令行工具和相应的C#代码示例：</p><ol><li><p>获取CPU信息<br>可以使用 <code>/proc/stat</code> 文件来获取<code> CPU</code> 的使用情况。<code>C# </code>可以通过读取该文件的内容来获取 <code>CPU</code> 的使用率。</p><pre><code class="highlight C#"><span class="keyword">using</span> System;<span class="keyword">using</span> System.IO;<span class="keyword">using</span> System.Linq;<span class="keyword">class</span> <span class="title">Program</span> &#123;    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;        <span class="built_in">string</span> statFilePath = <span class="string">&quot;/proc/stat&quot;</span>;        <span class="built_in">long</span> prevIdleTime = <span class="number">0</span>, prevTotalTime = <span class="number">0</span>;        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;            <span class="built_in">string</span>[] statFileContent = File.ReadAllText(statFilePath).Split(<span class="string">&#x27;\n&#x27;</span>);            <span class="built_in">string</span> cpuStatLine = statFileContent.FirstOrDefault(line =&gt; line.StartsWith(<span class="string">&quot;cpu &quot;</span>));            <span class="built_in">string</span>[] cpuStats = cpuStatLine.Split(<span class="string">&#x27; &#x27;</span>, StringSplitOptions.RemoveEmptyEntries);            <span class="built_in">long</span> idleTime = <span class="built_in">long</span>.Parse(cpuStats[<span class="number">4</span>]);            <span class="built_in">long</span> totalTime = cpuStats.Select(<span class="built_in">long</span>.Parse).Sum();            <span class="keyword">if</span> (prevIdleTime != <span class="number">0</span>) &#123;                <span class="built_in">double</span> idleTimeDelta = idleTime - prevIdleTime;                <span class="built_in">double</span> totalTimeDelta = totalTime - prevTotalTime;                <span class="built_in">double</span> cpuUsage = (totalTimeDelta - idleTimeDelta) / totalTimeDelta;                Console.WriteLine(<span class="string">$&quot;CPU usage: <span class="subst">&#123;cpuUsage:P&#125;</span>&quot;</span>);            &#125;            prevIdleTime = idleTime;            prevTotalTime = totalTime;            System.Threading.Thread.Sleep(<span class="number">1000</span>);        &#125;    &#125;&#125;</code></pre><p> 在该示例代码中，我们首先定义了一个<code> statFilePath</code> 变量来存储<code> /proc/stat</code> 文件的路径。然后在一个无限循环中，我们读取<code> /proc/stat</code> 文件的内容，并从中提取出与 <code>CPU</code> 相关的数据。</p><p> 我们使用 cpu 这一行的数据来计算 CPU 的使用率。具体地，我们计算出从上一次循环到现在<code>CPU</code>空闲时间的变化量 <code>idleTimeDelta</code> 和总时间的变化量 <code>totalTimeDelta</code>，然后使用这两个变化量来计算<code> CPU</code> 的使用率。</p><p> 最后，我们将当前的空闲时间和总时间保存到 <code>prevIdleTime</code> 和 <code>prevTotalTime</code> 变量中，以便下一次循环使用。我们还在每次循环结束前暂停了 1 秒钟，以便在连续的循环中计算<code>CPU</code>使用率的变化。</p></li><li><p>获取内存使用情况</p><p> 在<code>Linux</code>下，可以使用一些命令行工具来获取内存使用情况，比如<code>top</code>，<code>free</code>，<code>vmstat</code>等。你可以通过调用这些命令行工具，来获取内存使用情况。</p><p> 如果你想要使用<code>C#</code>代码来获取内存使用情况，可以使用<code>System.Diagnostics</code>命名空间下的<code>Process</code>类来调用这些命令行工具。具体方法如下：</p><ol><li>导入System.Diagnostics命名空间</li></ol> <pre><code class="highlight C#"><span class="keyword">using</span> System.Diagnostics;</code></pre><ol start="2"><li>创建一个Process对象，设置它的StartInfo属性，包括FileName和Arguments</li></ol> <pre><code class="highlight C#">Process process = <span class="keyword">new</span> Process();process.StartInfo.FileName = <span class="string">&quot;free&quot;</span>;process.StartInfo.Arguments = <span class="string">&quot;-m&quot;</span>;process.StartInfo.UseShellExecute = <span class="literal">false</span>;process.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</code></pre><p>   这里的命令行工具是free，-m表示以MB为单位显示内存使用情况。<br> 3. 启动进程并等待它完成</p> <pre><code class="highlight C#">process.Start();process.WaitForExit();</code></pre><ol start="4"><li>从进程的StandardOutput属性中读取输出结果</li></ol> <pre><code class="highlight C#"><span class="built_in">string</span> output = process.StandardOutput.ReadToEnd();</code></pre><ol start="5"><li>对输出结果进行解析，获取内存使用情况</li></ol> <pre><code class="highlight C#"><span class="built_in">string</span>[] lines = output.Split(<span class="string">&#x27;\n&#x27;</span>);<span class="built_in">string</span>[] parts = lines[<span class="number">1</span>].Split(<span class="keyword">new</span> <span class="built_in">char</span>[] &#123; <span class="string">&#x27; &#x27;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);<span class="built_in">int</span> totalMemory = <span class="built_in">int</span>.Parse(parts[<span class="number">1</span>]);<span class="built_in">int</span> usedMemory = <span class="built_in">int</span>.Parse(parts[<span class="number">2</span>]);<span class="built_in">int</span> freeMemory = <span class="built_in">int</span>.Parse(parts[<span class="number">3</span>]);</code></pre><p> 这样，你就可以通过C#代码获取Linux下的内存使用情况了。</p></li><li><p>获取硬盘IO信息<br> 可以使用iostat命令获取硬盘IO信息。在Linux系统上执行iostat命令后，会输出当前系统的硬盘IO情况信息。可以通过解析输出结果来获取硬盘读写速度和IO使用率等信息。</p> <pre><code class="highlight C#"><span class="keyword">using</span> System.Diagnostics;<span class="keyword">using</span> System.IO;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetDiskIOInfo</span>()</span>&#123;    <span class="comment">// Create a new process to run the iostat command</span>    Process process = <span class="keyword">new</span> Process();    process.StartInfo.FileName = <span class="string">&quot;iostat&quot;</span>;    process.StartInfo.Arguments = <span class="string">&quot;-d -x&quot;</span>;  <span class="comment">// -d: show only device utilization, -x: show extended statistics</span>    process.StartInfo.UseShellExecute = <span class="literal">false</span>;    process.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;    <span class="comment">// Start the process and read the output</span>    process.Start();    process.WaitForExit();    <span class="built_in">string</span> output = process.StandardOutput.ReadToEnd();        <span class="comment">// Parse the output and extract the relevant information</span>    StringReader reader = <span class="keyword">new</span> StringReader(output);    <span class="built_in">string</span> line;    <span class="keyword">while</span> ((line = reader.ReadLine()) != <span class="literal">null</span>)    &#123;        <span class="comment">// Find the line that starts with a device name (e.g. &quot;sda&quot;)</span>        <span class="keyword">if</span> (line.StartsWith(<span class="string">&quot;sda&quot;</span>))        &#123;            <span class="built_in">string</span>[] values = line.Split(<span class="keyword">new</span>[] &#123; <span class="string">&#x27; &#x27;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);            <span class="built_in">double</span> readRate = <span class="built_in">double</span>.Parse(values[<span class="number">5</span>]);   <span class="comment">// read rate in KB/s</span>            <span class="built_in">double</span> writeRate = <span class="built_in">double</span>.Parse(values[<span class="number">6</span>]);  <span class="comment">// write rate in KB/s</span>                <span class="comment">// Do something with the read and write rates</span>            Console.WriteLine(<span class="string">&quot;Read rate: &#123;0&#125; KB/s, Write rate: &#123;1&#125; KB/s&quot;</span>, readRate, writeRate);            <span class="keyword">break</span>;        &#125;    &#125;&#125;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 获取CPU、内存、硬盘IO和硬盘使用空间情况信息</title>
      <link href="/4b419777.html"/>
      <url>/4b419777.html</url>
      
        <content type="html"><![CDATA[<p>你可以使用<code>PerformanceCounter</code>类来获取计算机系统的<code>CPU</code>使用率、内存使用率、磁盘<code>I/O</code>使用率和磁盘空间使用情况信息。</p><p>以下是一个示例代码，展示如何使用<code>PerformanceCounter</code>类来获取这些信息：</p><pre><code class="highlight C#"><span class="keyword">using</span> System;<span class="keyword">using</span> System.Diagnostics;<span class="keyword">namespace</span> <span class="title">PerformanceCounterExample</span>&#123;    <span class="keyword">class</span> <span class="title">Program</span>    &#123;        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>        &#123;            <span class="comment">// 获取CPU使用率计数器</span>            <span class="keyword">var</span> cpuCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">&quot;Processor&quot;</span>, <span class="string">&quot;% Processor Time&quot;</span>, <span class="string">&quot;_Total&quot;</span>);            <span class="comment">// 获取可用内存计数器</span>            <span class="keyword">var</span> memoryCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">&quot;Memory&quot;</span>, <span class="string">&quot;Available MBytes&quot;</span>);            <span class="comment">// 获取磁盘读取操作/秒计数器</span>            <span class="keyword">var</span> diskReadCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">&quot;PhysicalDisk&quot;</span>, <span class="string">&quot;Disk Read Bytes/sec&quot;</span>, <span class="string">&quot;_Total&quot;</span>);            <span class="comment">// 获取磁盘写入操作/秒计数器</span>            <span class="keyword">var</span> diskWriteCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">&quot;PhysicalDisk&quot;</span>, <span class="string">&quot;Disk Write Bytes/sec&quot;</span>, <span class="string">&quot;_Total&quot;</span>);            <span class="comment">// 获取可用磁盘空间计数器</span>            <span class="keyword">var</span> diskSpaceCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">&quot;LogicalDisk&quot;</span>, <span class="string">&quot;Free Megabytes&quot;</span>, <span class="string">&quot;C:&quot;</span>);            <span class="keyword">while</span> (<span class="literal">true</span>)            &#123;                <span class="comment">// 获取CPU使用率</span>                <span class="keyword">var</span> cpuUsage = cpuCounter.NextValue();                <span class="comment">// 获取可用内存</span>                <span class="keyword">var</span> memoryUsage = memoryCounter.NextValue();                <span class="comment">// 获取磁盘读取操作字节/秒</span>                <span class="keyword">var</span> diskRead = diskReadCounter.NextValue();                <span class="comment">// 获取磁盘写入操作字节/秒</span>                <span class="keyword">var</span> diskWrite = diskWriteCounter.NextValue();                <span class="comment">// 获取可用磁盘空间</span>                <span class="keyword">var</span> diskSpace = diskSpaceCounter.NextValue();                <span class="comment">// 输出信息</span>                Console.WriteLine(<span class="string">&quot;CPU使用率: &#123;0&#125;%&quot;</span>, cpuUsage);                Console.WriteLine(<span class="string">&quot;可用内存: &#123;0&#125;MB&quot;</span>, memoryUsage);                Console.WriteLine(<span class="string">&quot;磁盘读取操作字节/秒: &#123;0&#125;&quot;</span>, diskRead);                Console.WriteLine(<span class="string">&quot;磁盘写入操作字节/秒: &#123;0&#125;&quot;</span>, diskWrite);                Console.WriteLine(<span class="string">&quot;可用磁盘空间: &#123;0&#125;MB&quot;</span>, diskSpace);                <span class="comment">// 等待1秒</span>                System.Threading.Thread.Sleep(<span class="number">1000</span>);            &#125;        &#125;    &#125;&#125;</code></pre><p>请注意，以上示例代码只获取计算机系统的总体情况。如果你想获取某个特定进程的CPU使用率或内存使用率，你需要使用特定进程的<code>PerformanceCounter</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 多线程异步下载文件</title>
      <link href="/defbc28f.html"/>
      <url>/defbc28f.html</url>
      
        <content type="html"><![CDATA[<p>在C#中，可以使用多线程异步方式下载文件以提高下载速度。以下是一个简单的示例：</p><pre><code class="highlight C#"><span class="keyword">using</span> System.Net;<span class="keyword">using</span> System.Threading.Tasks;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">DownloadFileAsync</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> filePath, <span class="built_in">int</span> numThreads = <span class="number">4</span></span>)</span>&#123;    <span class="comment">// 获取文件长度</span>    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);    request.Method = <span class="string">&quot;HEAD&quot;</span>;    HttpWebResponse response = (HttpWebResponse)<span class="keyword">await</span> request.GetResponseAsync();    <span class="built_in">long</span> contentLength = response.ContentLength;    response.Close();    <span class="comment">// 计算每个线程应该下载的字节数</span>    <span class="built_in">long</span> blockSize = contentLength / numThreads;    <span class="comment">// 创建下载任务列表</span>    <span class="keyword">var</span> tasks = <span class="keyword">new</span> List&lt;Task&gt;();    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; numThreads; i++)    &#123;        <span class="built_in">long</span> startRange = i * blockSize;        <span class="built_in">long</span> endRange = (i == numThreads - <span class="number">1</span>) ? contentLength - <span class="number">1</span> : (i + <span class="number">1</span>) * blockSize - <span class="number">1</span>;        tasks.Add(DownloadBlockAsync(url, filePath, startRange, endRange));    &#125;    <span class="comment">// 等待所有任务完成</span>    <span class="keyword">await</span> Task.WhenAll(tasks);&#125;<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">DownloadBlockAsync</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> filePath, <span class="built_in">long</span> startRange, <span class="built_in">long</span> endRange</span>)</span>&#123;    <span class="keyword">using</span> (WebClient client = <span class="keyword">new</span> WebClient())    &#123;        <span class="comment">// 设置下载范围</span>        client.Headers.Add(<span class="string">&quot;Range&quot;</span>, <span class="string">$&quot;bytes=<span class="subst">&#123;startRange&#125;</span>-<span class="subst">&#123;endRange&#125;</span>&quot;</span>);        <span class="comment">// 下载文件块并写入文件</span>        <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">await</span> client.OpenReadTaskAsync(url))        <span class="keyword">using</span> (<span class="keyword">var</span> fileStream = <span class="keyword">new</span> FileStream(filePath, FileMode.OpenOrCreate, FileAccess.Write, FileShare.Write))        &#123;            stream.CopyTo(fileStream);        &#125;    &#125;&#125;</code></pre><p>在上述代码中，首先使用<code>HEAD</code>请求获取文件长度。然后，计算每个线程应该下载的字节数，创建一个下载任务列表。对于每个任务，使用<code>Range</code>头指定下载范围，并使用<code>OpenReadTaskAsync</code>方法异步下载文件块。然后将文件块写入文件流中。最后，使用<code>WhenAll</code>方法等待所有任务完成。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> 异步 </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> 异步 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在WPF中下拉列表绑定枚举类型</title>
      <link href="/9ea316f0.html"/>
      <url>/9ea316f0.html</url>
      
        <content type="html"><![CDATA[<p>枚举值定义如下</p><pre><code class="highlight C#"><span class="keyword">public</span> <span class="built_in">enum</span> Gender&#123;    Woman,    Man&#125;</code></pre><p>在WPF中给下拉列表填充枚举值有如下方法</p><ol><li><p>获取所有的枚举值并生成一个集合进行绑定</p><ol><li><p>创建一个属性以获取枚举值列表：</p><p>您需要在<code>ViewModel</code>中创建一个属性以获取枚举值列表。</p><pre><code class="highlight C#"><span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">Gender</span>&gt; Genders</span>&#123;    <span class="keyword">get</span> &#123; <span class="keyword">return</span> Enum.GetValues(<span class="keyword">typeof</span>(Gender)).Cast&lt;Gender&gt;(); &#125;&#125;</code></pre></li><li><p>绑定下拉列表：</p><p>在<code>XAML</code>中，您可以使用<code>ComboBox</code>控件来显示下拉列表，并使用<code>ItemsSource</code>属性将其绑定到枚举值列表。</p><pre><code class="highlight C#">&lt;ComboBox ItemsSource=<span class="string">&quot;&#123;Binding Genders&#125;&quot;</span> /&gt;</code></pre><p>在此示例中，<code>ComboBox</code>的<code>ItemsSource</code>属性绑定到<code>ViewModel</code>中的<code>Genders</code>属性。</p><p>现在，当您运行此应用程序时，<code>ComboBox</code>将显示枚举值列表，用户可以选择其中一个值。</p><p>如果您想在<code>ComboBox</code>中显示枚举值的描述而不是名称，您可以在枚举值上使用<code>DescriptionAttribute</code>，并在绑定时使用<code>DisplayMemberPath</code>属性。</p><pre><code class="highlight C#"><span class="keyword">public</span> <span class="built_in">enum</span> Gender&#123;    [<span class="meta">Description(<span class="string">&quot;女&quot;</span>)</span>]    Woman,    [<span class="meta">Description(<span class="string">&quot;男&quot;</span>)</span>]    Man,&#125;<span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">MyEnum</span>&gt; Genders</span>&#123;    <span class="keyword">get</span> &#123; <span class="keyword">return</span> Enum.GetValues(<span class="keyword">typeof</span>(Gender)).Cast&lt;Gender&gt;(); &#125;&#125;&lt;ComboBox ItemsSource=<span class="string">&quot;&#123;Binding Genders&#125;&quot;</span> DisplayMemberPath=<span class="string">&quot;Description&quot;</span> /&gt;</code></pre><p>在此示例中，<code>ComboBox</code>将显示“女”和“男”作为下拉列表中的选项。请注意，<code>Description</code>属性需要使用<code>System.ComponentModel</code>命名空间。</p></li></ol></li><li><p>使用<code>ObjectDataProvider</code></p><ol><li><p>添加引用</p><p>在<code>xaml</code>文件中从<code>mscorlib</code>中引入命名空间<code>System</code>。</p><pre><code class="highlight xaml">xmlns:sys=&quot;clr-namespace:System;assembly=mscorlib&quot;</code></pre></li><li><p>创建一个<code>ObjectDataProvider</code>资源</p><p>在此，你需要创建一个<code>ObjectDataProvider</code>资源，并给它一个键名<code>DataFromGenderEnum</code>，这样就可以在代码中使用它</p><pre><code class="highlight xaml">&lt;ObjectDataProvider x:Key=&quot;DataFromGenderEnum&quot; MethodName=&quot;GetValues&quot; ObjectType=&quot;&#123;x:Type sys:Enum&#125;&quot;&gt;    &lt;ObjectDataProvider.MethodParameters&gt;        &lt;x:Type TypeName=&quot;local:Gender&quot;&gt;&lt;/x:Type&gt;    &lt;/ObjectDataProvider.MethodParameters&gt;&lt;/ObjectDataProvider&gt;</code></pre></li><li><p><code>Binding</code>数据处理</p><p>现在，你可以使用数据绑定了</p><pre><code class="highlight xaml">&lt;ComboBox ItemsSource=&quot;&#123;Binding Source=&#123;StaticResource DataFromGenderEnum&#125;&#125;&quot;&gt;&lt;/ComboBox&gt;</code></pre></li></ol></li><li><p>使用<code>MarkupExtension</code>帮助类<br>在使用中我们会发现，使用前面的方法，你需要对不同的<code>Enum</code>创建不同的属性或<code>ObjectDataProvider</code>，在这里我们使用<code>MarkupExtension</code>就只需要创建一个帮助类就可以支持多个<code>Enum</code></p><ol><li><p>我们先创建帮助类<code>EnumBindingSourceExtention</code></p><pre><code class="highlight c#"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumBindingSourceExtention</span> : <span class="title">MarkupExtension</span>&#123;    <span class="keyword">private</span> Type _enumType;    <span class="function"><span class="keyword">public</span> <span class="title">EnumBindingSourceExtention</span>(<span class="params">Type enumType</span>)</span>    &#123;        EnumType = enumType;    &#125;    <span class="function"><span class="keyword">public</span> <span class="title">EnumBindingSourceExtention</span>()</span>    &#123;    &#125;    <span class="keyword">public</span> Type EnumType    &#123;        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _enumType; &#125;        <span class="keyword">set</span>        &#123;            <span class="keyword">if</span> (_enumType != <span class="keyword">value</span>)            &#123;                <span class="keyword">if</span> (<span class="keyword">value</span> != <span class="literal">null</span>)                &#123;                    <span class="keyword">var</span> enumType = Nullable.GetUnderlyingType(<span class="keyword">value</span>) ?? <span class="keyword">value</span>;                    <span class="keyword">if</span> (!enumType.IsEnum)                    &#123;                        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须是一个枚举类型&quot;</span>);                    &#125;                &#125;                _enumType = <span class="keyword">value</span>;            &#125;        &#125;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ProvideValue</span>(<span class="params">IServiceProvider serviceProvider</span>)</span>    &#123;        <span class="keyword">if</span> (_enumType == <span class="literal">null</span>)        &#123;            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;必须先指定EnumType&quot;</span>);        &#125;        <span class="keyword">var</span> actualEnumType = Nullable.GetUnderlyingType(_enumType) ?? _enumType;        <span class="keyword">var</span> enumValues = Enum.GetValues(actualEnumType);        <span class="keyword">if</span> (actualEnumType == _enumType)        &#123;            <span class="keyword">return</span> enumValues;        &#125;        <span class="keyword">var</span> tempArray = Array.CreateInstance(actualEnumType, enumValues.Length + <span class="number">1</span>);        enumValues.CopyTo(tempArray, <span class="number">1</span>);        <span class="keyword">return</span> tempArray;    &#125;&#125;</code></pre></li><li><p>然后进行数据绑定</p><pre><code class="highlight xaml">&lt;ComboBox ItemsSource=&quot;&#123;Binding Source=&#123;local:EnumBindingSourceExtention &#123;x:Type local:Gender&#125;&#125;&#125;&quot; /&gt;</code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> WPF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> WPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#根据经纬度和缩放级别计算瓦片坐标</title>
      <link href="/57318bee.html"/>
      <url>/57318bee.html</url>
      
        <content type="html"><![CDATA[<p>要在C#中根据给定的经纬度和缩放级别计算瓦片坐标，你需要使用特定的公式和算法。以下是一个简单的步骤：</p><ol><li><p>将经纬度转换为瓦片坐标系中的像素坐标：你需要使用<code>Mercator</code>投影将经纬度坐标转换为瓦片坐标系中的像素坐标。这可以通过以下公式完成：</p><pre><code class="highlight C#"><span class="built_in">double</span> x = (lon + <span class="number">180</span>) / <span class="number">360</span> * Math.Pow(<span class="number">2</span>, zoom);<span class="built_in">double</span> y = (<span class="number">1</span> - Math.Log(Math.Tan(lat * Math.PI / <span class="number">180</span>) + <span class="number">1</span> / Math.Cos(lat * Math.PI / <span class="number">180</span>)) / Math.PI) / <span class="number">2</span> * Math.Pow(<span class="number">2</span>, zoom);</code></pre><p>其中，<code>lon</code>是经度，<code>lat</code>是纬度，<code>zoom</code>是缩放级别。</p></li><li><p>将像素坐标转换为瓦片坐标：在计算像素坐标后，你需要将其转换为瓦片坐标。这可以通过以下公式完成：</p><pre><code class="highlight C#"><span class="built_in">int</span> tileX = (<span class="built_in">int</span>)Math.Floor(x / <span class="number">256</span>);<span class="built_in">int</span> tileY = (<span class="built_in">int</span>)Math.Floor(y / <span class="number">256</span>);</code></pre><p>其中，256是瓦片的大小。</p></li><li><p>计算瓦片内部的像素坐标：计算完瓦片坐标后，你需要计算瓦片内部的像素坐标。这可以通过以下公式完成：</p><pre><code class="highlight C#"><span class="built_in">int</span> pixelX = (<span class="built_in">int</span>)Math.Floor(x - tileX * <span class="number">256</span>);<span class="built_in">int</span> pixelY = (<span class="built_in">int</span>)Math.Floor(y - tileY * <span class="number">256</span>);</code></pre><p>现在，你可以使用上述公式在<code>C#</code>中计算瓦片坐标了。以下是一个示例代码：</p><pre><code class="highlight C#"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CalculateTileCoordinates</span>(<span class="params"><span class="built_in">double</span> lat, <span class="built_in">double</span> lon, <span class="built_in">int</span> zoom, <span class="keyword">out</span> <span class="built_in">int</span> tileX, <span class="keyword">out</span> <span class="built_in">int</span> tileY, <span class="keyword">out</span> <span class="built_in">int</span> pixelX, <span class="keyword">out</span> <span class="built_in">int</span> pixelY</span>)</span>&#123;    <span class="built_in">double</span> x = (lon + <span class="number">180</span>) / <span class="number">360</span> * Math.Pow(<span class="number">2</span>, zoom);    <span class="built_in">double</span> y = (<span class="number">1</span> - Math.Log(Math.Tan(lat * Math.PI / <span class="number">180</span>) + <span class="number">1</span> / Math.Cos(lat * Math.PI / <span class="number">180</span>)) / Math.PI) / <span class="number">2</span> * Math.Pow(<span class="number">2</span>, zoom);    tileX = (<span class="built_in">int</span>)Math.Floor(x / <span class="number">256</span>);    tileY = (<span class="built_in">int</span>)Math.Floor(y / <span class="number">256</span>);    pixelX = (<span class="built_in">int</span>)Math.Floor(x - tileX * <span class="number">256</span>);    pixelY = (<span class="built_in">int</span>)Math.Floor(y - tileY * <span class="number">256</span>);&#125;</code></pre><p>你可以将以上代码添加到你的<code>C#</code>项目中，然后调用<code>CalculateTileCoordinates</code>方法来计算给定经纬度和缩放级别的瓦片坐标和像素坐标。例如：</p><pre><code class="highlight C#"><span class="built_in">int</span> tileX, tileY, pixelX, pixelY;CalculateTileCoordinates(<span class="number">40.7128</span>, <span class="number">-74.0060</span>, <span class="number">10</span>, <span class="keyword">out</span> tileX, <span class="keyword">out</span> tileY, <span class="keyword">out</span> pixelX, <span class="keyword">out</span> pixelY);Console.WriteLine(<span class="string">&quot;Tile X: &#123;0&#125;, Tile Y: &#123;1&#125;, Pixel X: &#123;2&#125;, Pixel Y: &#123;3&#125;&quot;</span>, tileX, tileY, pixelX, pixelY);</code></pre><p>此代码将在控制台中输出计算到的瓦片坐标</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#连接西门子S7-1200</title>
      <link href="/3e459270.html"/>
      <url>/3e459270.html</url>
      
        <content type="html"><![CDATA[<p>要使用<code>C#</code>连接<code>S7-1200 PLC</code>，可以使用<code>Siemens</code>提供的<code>S7-1200</code>开发工具包（也称为<code>S7-1200</code>软件开发工具包或<code>SDK</code>）和<code>C#</code>的相应库或<code>API</code>。下面是一个简单的步骤：</p><ol><li><p>下载和安装<code>S7-1200</code>开发工具包：</p><p>你需要从<code>Siemens</code>网站下载和安装适用于<code>S7-1200</code>的开发工具包。该工具包包含<code>S7-1200</code>的通信驱动程序、<code>API</code>和示例代码，可用于与<code>S7-1200</code>进行通信。</p></li><li><p>创建<code>S7-1200</code>连接对象：</p><p>一旦你安装了<code>S7-1200</code>开发工具包，你可以在<code>C#</code>中创建一个<code>S7-1200</code>连接对象，以连接和通信。你需要指定<code>S7-1200</code>的<code>IP</code>地址和端口号，并使用相应的<code>API</code>方法（例如<code>Connect</code>或<code>Disconnect</code>）建立或断开连接。</p></li><li><p>读取或写入<code>S7-1200</code>中的数据：</p><p>一旦你与<code>S7-1200</code>建立连接，你可以使用相应的<code>API</code>方法（例如<code>Read</code>或<code>Write</code>）读取或写入<code>S7-1200</code>中的数据。你需要指定要读取或写入的数据类型（例如位、字节、整数、浮点数等）以及其地址（例如DB块、输入&#x2F;输出模块、存储器等）。</p></li></ol><p>以下是一个使用<code>S7-1200</code>开发工具包连接到<code>S7-1200</code> <code>PLC</code>的示例代码：</p><pre><code class="highlight C#"><span class="keyword">using</span> System;<span class="keyword">using</span> System.Collections.Generic;<span class="keyword">using</span> System.Linq;<span class="keyword">using</span> System.Text;<span class="keyword">using</span> System.Threading.Tasks;<span class="keyword">using</span> Siemens.Simatic.S7.Webserver.API;<span class="keyword">using</span> Siemens.Simatic.S7.Webserver.API.Requests;<span class="keyword">using</span> Siemens.Simatic.S7.Webserver.API.Responses;<span class="keyword">using</span> Siemens.Simatic.S7.Webserver.API.Enums;<span class="keyword">namespace</span> <span class="title">S7_1200_Demo</span>&#123;    <span class="keyword">class</span> <span class="title">Program</span>    &#123;        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>        &#123;            <span class="comment">// 创建S7-1200连接对象</span>            <span class="keyword">using</span> (S7Connection connection = <span class="keyword">new</span> S7Connection(<span class="string">&quot;192.168.0.1&quot;</span>, <span class="number">102</span>))            &#123;                <span class="comment">// 连接到S7-1200</span>                connection.Connect();                <span class="comment">// 读取DB块中的数据</span>                <span class="built_in">byte</span>[] data = connection.Read(DataType.DataBlock, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>);                <span class="comment">// 输出读取的结果</span>                <span class="keyword">foreach</span> (<span class="built_in">byte</span> <span class="keyword">value</span> <span class="keyword">in</span> data)                &#123;                    Console.WriteLine(<span class="keyword">value</span>);                &#125;                <span class="comment">// 关闭与S7-1200的连接</span>                connection.Disconnect();            &#125;        &#125;    &#125;&#125;</code></pre><p>在上面的示例中，我们使用<code>Siemens.Simatic.S7.Webserver.API</code>命名空间中的<code>S7Connection</code>类创建了一个<code>S7-1200</code>连接对象，并使用<code>Connect</code>方法连接到<code>S7-1200</code>。然后，我们使用<code>Read</code>方法从<code>DB1</code>块中读取10个字节的数据，并将结果输出到控制台。最后，我们使用<code>Disconnect</code>方法断开与<code>S7-1200</code>的连接。</p><p>请注意，此示例仅供参考，实际的代码可能会因<code>S7-1200</code>型号、通信协议和<code>API</code>而有所不同。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> PLC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> PLC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPOI读取Excel日期类型</title>
      <link href="/375f4711.html"/>
      <url>/375f4711.html</url>
      
        <content type="html"><![CDATA[<p>最近要帮客户写个小工具，来对多个Excel文件进行数据汇总，其中主要涉及到对数据的读取和分类，在读取数据时就遇到了好几个坑，这里主要说下日期类型数据的读取</p><p>NPOI内置的单元格值类型有<code>Unknown</code>、<code>Numeric</code>、<code>String</code>、<code>Formula</code>、<code>Blank</code>、<code>Boolean</code>、<code>Error</code>，但是其中没有日期类型，最开始我的取单元格值的方法如下：</p><pre><code class="highlight c#"><span class="keyword">switch</span> (cell.CellType)&#123;    <span class="keyword">case</span> CellType.String:        <span class="keyword">return</span> cell.StringCellValue;    <span class="keyword">case</span> CellType.Numeric:        <span class="keyword">return</span> cell.NumericCellValue;    <span class="keyword">case</span> CellType.Boolean:        <span class="keyword">return</span> cell.BooleanCellValue;    <span class="keyword">case</span> CellType.Error:        <span class="keyword">return</span> cell.ErrorCellValue;    <span class="keyword">case</span> CellType.Formula:        BaseFormulaEvaluator evaluator;        <span class="keyword">if</span> (sheet <span class="keyword">is</span> XSSFSheet)        &#123;            evaluator = <span class="keyword">new</span> XSSFFormulaEvaluator(sheet.Workbook);        &#125;        <span class="keyword">else</span>        &#123;            evaluator = <span class="keyword">new</span> HSSFFormulaEvaluator(sheet.Workbook);        &#125;        <span class="keyword">var</span> formulaValue = evaluator.Evaluate(cell);        <span class="keyword">if</span> (formulaValue.CellType == CellType.Numeric)        &#123;            <span class="keyword">return</span> formulaValue.NumberValue;        &#125;        <span class="keyword">else</span> <span class="keyword">if</span> (formulaValue.CellType == CellType.String)        &#123;            <span class="keyword">return</span> formulaValue.StringValue;        &#125;        <span class="keyword">return</span> cell.ToString();    <span class="literal">default</span>:        <span class="keyword">return</span> cell.ToString();&#125;</code></pre><p>测试时发现，日期类型的单元格在代码中获取到的<code>CellType</code>为<code>Numeric</code>，最后获取到的是一个数字，不是日期，翻了源码，找到了一个类<code>DateUtil</code>，里面提供了一个方法<code>IsCellDateFormatted</code>可以判断单元格的值是不是日期类型，还提供了一个方法<code>GetJavaDate</code>可以把获取到的数字转化成日期格式，所以我对代码进行了修改</p><pre><code class="highlight C#"><span class="keyword">switch</span> (cell.CellType)&#123;    <span class="keyword">case</span> CellType.String:        <span class="keyword">return</span> cell.StringCellValue;    <span class="keyword">case</span> CellType.Numeric:        <span class="keyword">if</span> (DateUtil.IsCellDateFormatted(cell))        &#123;            <span class="keyword">return</span> cell.DateCellValue;        &#125;        <span class="keyword">return</span> cell.NumericCellValue;    <span class="keyword">case</span> CellType.Boolean:        <span class="keyword">return</span> cell.BooleanCellValue;    <span class="keyword">case</span> CellType.Error:        <span class="keyword">return</span> cell.ErrorCellValue;    <span class="keyword">case</span> CellType.Formula:        BaseFormulaEvaluator evaluator;        <span class="keyword">if</span> (sheet <span class="keyword">is</span> XSSFSheet)        &#123;            evaluator = <span class="keyword">new</span> XSSFFormulaEvaluator(sheet.Workbook);        &#125;        <span class="keyword">else</span>        &#123;            evaluator = <span class="keyword">new</span> HSSFFormulaEvaluator(sheet.Workbook);        &#125;        <span class="keyword">var</span> formulaValue = evaluator.Evaluate(cell);        <span class="keyword">if</span> (formulaValue.CellType == CellType.Numeric)        &#123;            <span class="keyword">return</span> formulaValue.NumberValue;        &#125;        <span class="keyword">else</span> <span class="keyword">if</span> (formulaValue.CellType == CellType.String)        &#123;            <span class="keyword">return</span> formulaValue.StringValue;        &#125;        <span class="keyword">return</span> cell.ToString();    <span class="literal">default</span>:        <span class="keyword">return</span> cell.ToString();&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> NPOI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> NPOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#监控Windows系统硬件接入断开</title>
      <link href="/b52c83db.html"/>
      <url>/b52c83db.html</url>
      
        <content type="html"><![CDATA[<p>可以使用C#中的<code>ManagementEventWatcher</code>类来监控Windows系统硬件接入和断开事件。以下是一个简单的示例代码，该代码可以监控系统中所有硬件接入和断开事件：</p><pre><code class="highlight C#"><span class="keyword">using</span> System;<span class="keyword">using</span> System.Management;<span class="keyword">namespace</span> <span class="title">HardwareMonitoring</span>&#123;    <span class="keyword">class</span> <span class="title">Program</span>    &#123;        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>        &#123;            <span class="comment">// Create a new event query to monitor all hardware connect and disconnect events</span>            WqlEventQuery query = <span class="keyword">new</span> WqlEventQuery(<span class="string">&quot;SELECT * FROM Win32_DeviceChangeEvent&quot;</span>);            <span class="comment">// Create a new event watcher and subscribe to events that match the query</span>            ManagementEventWatcher watcher = <span class="keyword">new</span> ManagementEventWatcher(query);            watcher.EventArrived += <span class="keyword">new</span> EventArrivedEventHandler(DeviceChangeEvent);            <span class="comment">// Start monitoring</span>            watcher.Start();            <span class="comment">// Wait for user input to exit</span>            Console.WriteLine(<span class="string">&quot;Press any key to exit&quot;</span>);            Console.ReadKey();            <span class="comment">// Stop monitoring</span>            watcher.Stop();        &#125;        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DeviceChangeEvent</span>(<span class="params"><span class="built_in">object</span> sender, EventArrivedEventArgs e</span>)</span>        &#123;            <span class="comment">// Extract event properties</span>            PropertyData eventType = e.NewEvent.Properties[<span class="string">&quot;EventType&quot;</span>];            PropertyData deviceName = e.NewEvent.Properties[<span class="string">&quot;DeviceName&quot;</span>];            <span class="comment">// Print event information</span>            Console.WriteLine(<span class="string">&quot;Event Type: &#123;0&#125;&quot;</span>, eventType.Value);            Console.WriteLine(<span class="string">&quot;Device Name: &#123;0&#125;&quot;</span>, deviceName.Value);            Console.WriteLine();        &#125;    &#125;&#125;</code></pre><p>在上面的代码中，<code>DeviceChangeEvent</code>方法是一个事件处理程序，它将在硬件接入和断开事件发生时被调用。该方法提取事件的属性，并将其打印到控制台上。您可以根据自己的需求修改此方法，以执行特定的操作。请注意，您需要具有管理员权限才能运行此代码，以便监视系统级别的事件。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> C# </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> C# </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
